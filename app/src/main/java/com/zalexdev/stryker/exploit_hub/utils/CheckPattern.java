package com.zalexdev.stryker.exploit_hub.utils;

import static android.content.ContentValues.TAG;

import android.annotation.SuppressLint;
import android.os.AsyncTask;
import android.util.Log;

import com.zalexdev.stryker.utils.Core;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Locale;

/**
 * This class is used to check if a pattern is found in a file
 */
public class CheckPattern extends AsyncTask<Void, Boolean, Boolean> {


    public String pattern;
    public String path;

    public CheckPattern(String p,String pa) {
        pattern = p;
        path = pa;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();

    }

    @SuppressLint("WrongThread")
    @Override
    protected Boolean doInBackground(Void... command) {
        String line;
        Boolean found = false;
        try {
            Process process = Runtime.getRuntime().exec("su -mm");
            OutputStream stdin = process.getOutputStream();
            InputStream stderr = process.getErrorStream();
            InputStream stdout = process.getInputStream();
            stdin.write((Core.EXECUTE+ " 'strings /sdcard/Stryker/exploits/"+path+"'" + '\n').getBytes());
            stdin.write(("exit\n").getBytes());
            stdin.flush();
            stdin.close();
            BufferedReader br = new BufferedReader(new InputStreamReader(stdout));
            while ((line = br.readLine()) != null)
            {if (line.toLowerCase(Locale.ROOT).contains(pattern.toLowerCase(Locale.ROOT))){found = true;}}
            br.close();
            br = new BufferedReader(new InputStreamReader(stderr));
            br.close();
            process.waitFor();
            process.destroy();
        }
        catch (IOException e) {Log.d(TAG, "An IOException was caught: " + e.getMessage());}
        catch (InterruptedException ex) {Log.d(TAG, "An InterruptedException was caught: " + ex.getMessage());}
        return found;
    }

    @Override
    protected void onPostExecute(Boolean result) {
        super.onPostExecute(result);
    }

    @Override
    protected void onProgressUpdate(Boolean... values) {
        super.onProgressUpdate(values);

    }


}
