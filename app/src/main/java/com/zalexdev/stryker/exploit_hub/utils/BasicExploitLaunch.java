package com.zalexdev.stryker.exploit_hub.utils;

import static android.content.ContentValues.TAG;

import android.annotation.SuppressLint;
import android.os.AsyncTask;
import android.util.Log;

import com.zalexdev.stryker.utils.Core;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.util.ArrayList;

/**
 * This class is used to run exploit
 */
public class BasicExploitLaunch extends AsyncTask<Void, Boolean, Boolean> {


    public String pattern;
    public String cmd;
    public Core core;

    public BasicExploitLaunch(String p, String c,Core co) {
        pattern = p;
        cmd = c;
        core = co;
    }

    @Override
    protected void onPreExecute() {
        super.onPreExecute();

    }

    @SuppressLint("WrongThread")
    @Override
    protected Boolean doInBackground(Void... command) {
        String line;
        Boolean SUCCESS = false;
        ArrayList<String> out = new ArrayList<>();
        ArrayList<String> out2 = new ArrayList<>();
        try {

            Process process = Runtime.getRuntime().exec("su -mm");
            OutputStream stdin = process.getOutputStream();
            InputStream stderr = process.getErrorStream();
            InputStream stdout = process.getInputStream();
            stdin.write((Core.EXECUTE+ " '"+ cmd +"'" + '\n').getBytes());
            stdin.write(("exit\n").getBytes());
            stdin.flush();
            stdin.close();

            BufferedReader br = new BufferedReader(new InputStreamReader(stdout));
            while ((line = br.readLine()) != null) {
                if (line.contains(pattern)){
                    SUCCESS = true;
                }
                out.add(line);
            }
            br.close();
            br = new BufferedReader(new InputStreamReader(stderr));
            while ((line = br.readLine()) != null) {
                if (line.contains(pattern)){
                    SUCCESS = true;
                }
                out2.add(line);
            }
            br.close();
            process.waitFor();
            process.destroy();
        } catch (IOException e) {Log.d("Debug: ", "An IOException was caught: " + e.getMessage()); } catch (InterruptedException ex) {Log.d("Debug: ", "An InterruptedException was caught: " + ex.getMessage());}
        core.writetolog(out,false);
        core.writetolog(out2,true);
        return SUCCESS;
    }

    @Override
    protected void onPostExecute(Boolean result) {
        super.onPostExecute(result);
    }

    @Override
    protected void onProgressUpdate(Boolean... values) {
        super.onProgressUpdate(values);

    }


}
